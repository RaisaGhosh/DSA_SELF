Here we are using 2 pointer left & right and a hashmap.

So we keep moving right to traverse each character of the string and at each step check if the character at the right position already in hashmap or not.

If not present, add the character as key and its position as value in the hashmap.

If present, means that if we move left pointer to one after the position of the repeating charater(1+hashmap[char]), we'll get a subarray from left to right having no repeating characters. Also we'll update the index of the charcter to the current index(hashmap[char] = current index).

Now it might also be that the repeating character is present at an index < left pointer, which means in the range left to right it is actually not repeated so we'll treat [left...right] as a subarray with no repeating characters. Here we'll simply just update the index of the character to the current index (hashmap[char] = current index).

Now suppose the string is "abccba" , when right is at index 3, repeating character is encountered. So we move left pointer to 1+ c's original index, i.e. 2, so now left = 3.
Now when right = 4, b is already present in hashmap but hashmap['b']=1 & 1<3 so we treat [left to right] as an array with no repitition and update hashmap['b']=4



C++ :

```
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        unordered_map<char,int> hashMap;
        int max_length = 0;
        int l = 0, r = 0;
        
        for(int i = 0 ; i<s.length() ;++i){
            if(hashMap.find(s.at(i)) != hashMap.end()){
                if(hashMap[s.at(i)]>=l){
                    l = hashMap[s.at(i)]+1;
                    max_length = max(max_length,r-l+1);
                    hashMap[s.at(i)] = i;
                }
                else{
                    max_length = max(max_length,r-l+1);
                    hashMap[s.at(i)] = i;
                }
            }
            else{
                hashMap[s.at(i)] = i;
                 max_length = max(max_length,r-l+1);
            } 
            
            ++r;
        }
        
        return max_length;
    }
};
```

JAVA : 

```
class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        HashMap<Character,Integer> hashMap = new HashMap<Character,Integer>();
        
        int maxLength = 0 , left=0, right=0;
        
        for(right=0; right<s.length() ; ++right){
            
            if(hashMap.get(s.charAt(right)) != null){
                
                if(hashMap.get(s.charAt(right))>=left){
                   left = hashMap.get(s.charAt(right))+1;
                }
                
                maxLength = Math.max(maxLength,right-left+1);
                hashMap.put(s.charAt(right),right);
                
            }
            else{
                maxLength = Math.max(maxLength,right-left+1);
                hashMap.put(s.charAt(right),right);;
            }
        }
        
        return maxLength;
        
    }
}
```

Time Complexity : O(n)
Space Complexity : O(n)






Intially thought of this inside the for loop in JAVA solution:

```
if(hashMap.get(s.charAt(right)) != null){
                
                if(hashMap.get(s.charAt(right))<left){
                    maxLength = Math.max(maxLength,right-left+1);
                    hashMap.put(s.charAt(right),right);
                    continue;
                }
                
                left = hashMap.get(s.charAt(right))+1;
                maxLength = Math.max(maxLength,right-left+1);
                hashMap.put(s.charAt(right),right);
                
            }
```