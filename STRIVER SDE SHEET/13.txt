This solution is based on simple math:

Suppose we have to find 2^10

So 2^10 can be written as (2 * 2) ^ 5 = 4 ^ 5
	 4 ^ 5 can be written as 4 * 4^4
	 4^4  can be written as (4 * 4) ^ 2 = 16 ^ 2
	 16^2 can be written as (16 * 16) ^ 1 = 256 ^ 1
	 256^1 can be written as 256 * 256^0
	 256^0 can be written as 1
	 
So if we put back the values one by one , 2^10 = 1024

Now here everytime we see n%2 = 0, answer = (x * x) ^ (n/2)
														else, answer = x * (x ^ (n-1))
														
This is the simple mathematical concept that we can implement here using recursion!

```
class Solution {
public:
    double myPow(double x, int n) {
        
        if(n==0) return 1;      //anything to the power 0 is 1
        
        if(x==1 || n==1) return x;  //1 to the power anything = 1 or x to the power 1 = x
        
        double ans = 1;
        
        long long int a = abs(n);   //since int range is from -2147483648 to 2147483647, so it can't store absolute value of -2147483648
        
        if(n<0){    //as 2^(-2) = 1/2^2
            if(a%2 == 0) ans = 1/myPow(x*x,a/2);
            else ans = 1/(x * myPow(x,a-1));
        }
        else{
            if(a%2 == 0) ans = myPow(x*x,a/2);
            else ans = x * myPow(x,a-1);
        }
        
        return ans;
        
    }
};
```

Alternatively we could've also used for more simplicity:
```
if(n<0)   x=1/x;

 if(a%2 == 0) ans = myPow(x*x,a/2);
else ans = x * myPow(x,a-1);
```

Time Complexity. : O(log n)
Space COmplexity : O(1)