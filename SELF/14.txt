https://leetcode.com/problems/house-robber/



You can refer this video to understand the working properly :
[https://youtu.be/73r3KWiEvyk]

Here basically we are thinking of what is the maximum possible money robbed for the 2 indices before the current index and then we are finding the maximum possible money that can be robbed by either considering the current house or not considering it.

```
class Solution {
public:
    int rob(vector<int>& nums) {
        
        int rob1 = 0 , rob2 = 0;
        
        for(auto it : nums){ 
            int temp = max(it + rob1 , rob2);
            rob1 = rob2 ;
            rob2 = temp;
        }
        
        return rob2;
    }
};
```


Time Complexity : O(n)
Space Complexity : O(1)


[Runtime: 0 ms, faster than 100.00% of C++ online submissions for House Robber.
Memory Usage: 7.7 MB, less than 76.61% of C++ online submissions for House Robber.]